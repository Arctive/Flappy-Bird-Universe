/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/character_info.js":
/*!*******************************!*\
  !*** ./src/character_info.js ***!
  \*******************************/
/*! exports provided: createCharacterMenu, getCharDetails */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createCharacterMenu\", function() { return createCharacterMenu; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCharDetails\", function() { return getCharDetails; });\n//all character names\r\nconst FLAPPY_BIRD = \"flappyBird\";\r\nconst MARIO_FISH = \"marioFish\";\r\nconst NYAN_CAT = \"nyanCat\";\r\nconst ANGRY_BIRD = \"angryBird\";\r\nconst MARIO_CAPE = \"marioCape\";\r\nconst BANANYA_CAT = \"bananyaCat\";\r\n\r\n//all character image info\r\nconst allCharInfo = {\r\n    [FLAPPY_BIRD]: {\r\n        link: \"assets/images/flappyBird.png\",     // 51x36\r\n        width: 51,\r\n        height: 36,\r\n        callback: null\r\n    },\r\n    [MARIO_FISH]: {\r\n        link: \"assets/images/Fish.png\",           // 40x40\r\n        width: 40,\r\n        height: 40,\r\n        callback: null\r\n    },\r\n    [NYAN_CAT]: {\r\n        link: \"assets/images/NyanCat.png\",        // 65x40\r\n        width: 65,\r\n        height: 40,\r\n        callback: null\r\n    },\r\n    [ANGRY_BIRD]: {\r\n        link: \"assets/images/angryBird.png\",      // 50x46\r\n        width: 50,\r\n        height: 46,\r\n        callback: null\r\n    },\r\n    [MARIO_CAPE]: {\r\n        link: \"assets/images/marioCape.png\",      // 56x56\r\n        width: 56,\r\n        height: 56,\r\n        callback: null\r\n    },\r\n    [BANANYA_CAT]: {\r\n        link: \"assets/images/Bananya.png\",        // 32x55\r\n        width: 32,\r\n        height: 55,\r\n        callback: null\r\n    }\r\n}\r\n\r\nconst _getCharImage = imgSource => {\r\n    //creates and returns an image element\r\n    const pic = new Image();\r\n    pic.src = imgSource;\r\n    return pic;\r\n}\r\n\r\n//create array of image elements w/ event listeners\r\nconst createCharacterMenu = (charSelectionBox, callback) => {\r\n    const characterNames = Object.keys(allCharInfo);\r\n    characterNames.forEach( (name, idx) => {\r\n        const charImage = _getCharImage(allCharInfo[name].link);\r\n        charImage.setAttribute(\"id\", `${name}`);\r\n        charImage.addEventListener(\"click\", callback);\r\n        charSelectionBox.appendChild(charImage);\r\n    });\r\n}\r\n\r\n//retrieve individual character details and return as an object\r\nconst getCharDetails = name => {\r\n    return allCharInfo[name];\r\n}\n\n//# sourceURL=webpack:///./src/character_info.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Game; });\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n/* harmony import */ var _level__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./level */ \"./src/level.js\");\n/* harmony import */ var _character_info__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./character_info */ \"./src/character_info.js\");\n\r\n\r\n\r\n\r\nclass Game {\r\n    constructor(canvas){\r\n        this.ctx = canvas.getContext(\"2d\");\r\n        this.dimensions = {\r\n            width: canvas.width,\r\n            height: canvas.height\r\n        };\r\n        this.level = null;\r\n        this.player = null;\r\n        this.selectedChar = \"\";\r\n        this.running = false;\r\n        this.score = 0;\r\n        this.highScore = 0;\r\n        this.addEvents();\r\n        this.reset();\r\n        this.toggleTitleScreen();\r\n    }\r\n\r\n    _toggleVisibility(element){\r\n        //receives reference to element, toggles visibility\r\n        element.id = (element.id !== \"show\") ? \"show\" : \"no-show\";\r\n    }\r\n\r\n    _showMenu(menuElement, titleElement){\r\n        //receives menu and title elements, toggles background and menu visibility\r\n        const backBoxElement = document.querySelector(\".backBox\");\r\n        [menuElement, titleElement, backBoxElement].forEach( ele => {\r\n            this._toggleVisibility(ele);\r\n        });\r\n    }\r\n\r\n    toggleTitleScreen(){\r\n        //runs title screen animation, starting game goes to character selection screen\r\n        this._toggleVisibility(document.querySelector(\".startButton\")); //show start button\r\n        \r\n        //run pipe animation until start button clicked\r\n    }\r\n\r\n    toggleCharacterSelectionScreen(){\r\n        //presents character selection, initializes player object and calls startGame\r\n        const charSelection = document.querySelector(\".charSelection\");\r\n        const menuTitle = document.querySelector(\".menuTitle\");\r\n        menuTitle.innerHTML = \"Choose your character!\";\r\n        this._showMenu(charSelection, menuTitle);\r\n    }\r\n\r\n    toggleEndGameScreen(){\r\n        //presents end game screen and options to try again or choose character\r\n        const endScreen = document.querySelector(\".endScreen\");\r\n        const menuTitle = document.querySelector(\".menuTitle\");\r\n        menuTitle.innerHTML = \"GAME OVER\";\r\n        this.showFinalScore();\r\n        this._showMenu(endScreen, menuTitle);\r\n    }\r\n\r\n    handleStartButton(){\r\n        return (e) => {\r\n            e.preventDefault();\r\n            this._toggleVisibility(document.querySelector(\".startButton\"));\r\n            this.toggleCharacterSelectionScreen();\r\n        }\r\n    }\r\n\r\n    handleSelection(){\r\n        return (e) => {\r\n            e.preventDefault();\r\n            //retrieve selected char details and initialize player instance\r\n            this.selectedChar = e.target.id;\r\n\r\n            //close character selection menu\r\n            this.toggleCharacterSelectionScreen();\r\n\r\n            //start game\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    handleEndScreen(option){\r\n        return (e) => {\r\n            e.preventDefault();\r\n            \r\n            //close end screen menu\r\n            this.toggleEndGameScreen();\r\n\r\n            //redirect based on option chosen\r\n            this.reset();\r\n            if (option === \"restart\"){  //restart with same character\r\n                this.play();\r\n            } else {                    //reselect character\r\n                this.toggleCharacterSelectionScreen();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleCanvasClick(){\r\n        //clicking makes player fly up if game is running\r\n        if (this.running) this.player.flap();\r\n    }\r\n\r\n    addEvents(){\r\n        //adds all event listeners to the appropriate elements\r\n\r\n        //click on canvas makes player fly\r\n        this.ctx.canvas.addEventListener(\"mousedown\", () => this.handleCanvasClick());\r\n\r\n        //start button leads to character selection screen\r\n        const startButton = document.querySelector(\".startButton\");\r\n        startButton.addEventListener(\"click\", this.handleStartButton());\r\n\r\n        //load characters to character selection menu\r\n        const charSelection = document.querySelector(\".charSelection\");\r\n        _character_info__WEBPACK_IMPORTED_MODULE_2__[\"createCharacterMenu\"](charSelection, this.handleSelection());\r\n\r\n        //endscreen buttons, options to restart or choose characer\r\n        const restartButton = document.getElementById(\"restart\");\r\n        restartButton.addEventListener(\"click\", this.handleEndScreen(\"restart\"));\r\n        const changeCharButton = document.getElementById(\"charSelect\");\r\n        changeCharButton.addEventListener(\"click\", this.handleEndScreen(\"charSelect\"));\r\n    }\r\n\r\n    drawScore() {\r\n        //draws the score at the top of the canvas\r\n        const currentScore = document.querySelector(\".show-score\");\r\n        currentScore.innerHTML = this.score;\r\n    }\r\n\r\n    showFinalScore(){\r\n        //adds current score and high score to end game screen\r\n        const currentScoreBox = document.querySelector(\".currentScore\");\r\n        const highScoreBox = document.querySelector(\".highScore\");\r\n\r\n        //get score texts\r\n        const currentScoreText = `Score: ${this.score}`;\r\n        let highScoreText = `Best: ${this.highScore}`;\r\n        if (this.score > this.highScore){\r\n            //update high score\r\n            this.highScore = this.score;\r\n            highScoreText = `[NEW] Best: ${this.highScore}`;\r\n        }\r\n\r\n        //add to box element\r\n        currentScoreBox.innerHTML = currentScoreText;\r\n        highScoreBox.innerHTML = highScoreText;\r\n    }\r\n\r\n    reset(){\r\n        //reset the level, player, running status, then call animate\r\n        this.level = new _level__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.dimensions);\r\n        this.player = null;\r\n        this.score = 0;\r\n        this.running = false;\r\n        this.animate();\r\n    }\r\n\r\n    play(){\r\n        //begin playing game: set running status, initializes character, and start animation\r\n        this.running = true;\r\n        this.player = new _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.dimensions, _character_info__WEBPACK_IMPORTED_MODULE_2__[\"getCharDetails\"](this.selectedChar));\r\n        this.animate();\r\n    }\r\n\r\n    gameOver(){\r\n        //returns true if player collides with pipe\r\n        return this.level.collidesWith(this.player.getBounds());\r\n    }\r\n\r\n    animate(){\r\n        //creates images on canvas while the game is running\r\n        this.level.animate(this.ctx);\r\n        if (!this.running) return;\r\n        this.player.animate(this.ctx);\r\n\r\n        //check for collisions, end game if player hits pipe\r\n        if (this.gameOver()){\r\n            this.toggleEndGameScreen();\r\n            return;\r\n        }\r\n\r\n        //update and draw score\r\n        this.level.updateScore(this.player.getBounds(), () => this.score++ );\r\n        this.drawScore();\r\n\r\n        //get next animation frame\r\n        requestAnimationFrame(() => this.animate());\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n\r\nconst canvas = document.getElementById('canvas');\r\nnew _game__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas);\r\n\r\n/*\r\n// //images\r\n// let charLinks = [\"assets/images/flappyBird.png\", \"assets/images/Fish.png\", \"assets/images/NyanCat.png\",\r\n//                  \"assets/images/angryBird.png\", \"assets/images/marioCape.png\", \"assets/images/Bananya.png\"];\r\n// let birdPic = new Image();\r\n// birdPic.src = \"assets/images/flappyBird.png\"; // 51x36\r\n// let fishPic = new Image();\r\n// fishPic.src = \"assets/images/Fish.png\"; // 40x40\r\n// let catPic = new Image();\r\n// catPic.src = \"assets/images/NyanCat.png\"; // 65x40\r\n// let marioCapePic = new Image();\r\n// marioCapePic.src = \"assets/images/marioCape.png\"; // 56x56\r\n// let angryBirdPic = new Image();\r\n// angryBirdPic.src = \"assets/images/angryBird.png\";  // 50x46\r\n// let bananyaPic = new Image();\r\n// bananyaPic.src = \"assets/images/Bananya.png\"; // 32x55\r\n// let topPipesPic = new Image();\r\n// topPipesPic.src = \"assets/images/pipesTop2.png\"; // 52x480\r\n// let btmPipesPic = new Image();\r\n// btmPipesPic.src = \"assets/images/pipesBtm2.png\"; // 52x480\r\n// let bgDay = new Image();\r\n// bgDay.src = \"assets/images/bgDay.png\"; // 600x480\r\n// let fgDay = new Image();\r\n// fgDay.src = \"assets/images/fgDay.png\"; // 480x60\r\n// let characterImages = [birdPic, fishPic, catPic, angryBirdPic, marioCapePic, bananyaPic];\r\n// let characterDimensions = [[51,36], [40,40], [65,40], [50,46], [56,56], [32,55]];\r\n\r\n// Setup game graphic objects\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    // let c = document.getElementById(\"canvas\");\r\n    // let ctx = c.getContext('2d');\r\n    // let player = {\"x\":50, \"y\":0, \"v\":0, \"pWidth\": 0, \"pHeight\": 0};\r\n    // let charChoice;\r\n    // let gapConst = 130;\r\n    let fgHeight = 40;\r\n    // let score = highScore =  0;\r\n    let motionTrailLength = 30;\r\n    let opacity = 0;\r\n    let rainbowColors = [\"255,0,0\", \"255,153,0\", \"255,255,0\", \"0,255,0\", \"0,102,255\", \"153,0,255\"];\r\n    // let pastPosition = [];\r\n    // let pipeLocation = [];\r\n    // let update;\r\n    // let crash = false;\r\n    let newScore = false;\r\n\r\n    //background music\r\n    const addMusic = () => {\r\n        let findAudio = document.querySelector(\"audio\");\r\n        if (findAudio) document.body.removeChild(findAudio);\r\n        let bgAudio = document.createElement(\"audio\");\r\n        bgAudio.autoplay = true;\r\n        bgAudio.loop = true;\r\n        bgAudio.controls = true;\r\n        bgAudio.volume = 0.3;\r\n\r\n        let bgSource = document.createElement(\"source\");\r\n        bgSource.src = \"assets/audio/rick_astley.mp3\";\r\n        bgSource.type = \"audio/mp3\";\r\n        \r\n        bgAudio.appendChild(bgSource);\r\n        document.body.appendChild(bgAudio);\r\n    }\r\n    \r\n    // //current score, hidden at start\r\n    // let currentScore = document.createElement(\"div\");\r\n    // currentScore.setAttribute(\"class\", \"no-score\");\r\n    // document.body.appendChild(currentScore);\r\n\r\n    // //toggle score display\r\n    // const toggleScoreDisplay = () => {\r\n    //     if (currentScore.getAttribute(\"class\") === \"no-score\"){\r\n    //         currentScore.setAttribute(\"class\", \"show-score\");\r\n    //     } else{\r\n    //         currentScore.setAttribute(\"class\", \"no-score\");\r\n    //     }\r\n    // }\r\n\r\n    // //update score\r\n    // const updateScore = () => {\r\n    //     currentScore.innerHTML = score;\r\n    // }\r\n\r\n    // //scrolling background\r\n    // window.onload = function(){\r\n    //     const bgScroll = function (){\r\n    //         ctx.drawImage(bgDay, 0, 0);\r\n    //     }\r\n    //     bgScroll();\r\n    // }\r\n\r\n    // //listener for start button\r\n    // let startButton = document.getElementById(\"startButton\");\r\n    // startButton.addEventListener(\"click\", chooseCharScreen);\r\n\r\n    //fps counter\r\n    let fps = {\r\n        startTime : 0,\r\n        frameNumber : 0,\r\n        getFPS : function(){\r\n            this.frameNumber++;\r\n            let d = new Date().getTime();\r\n            currentTime = ( d - this.startTime ) / 1000;\r\n            result = Math.floor( ( this.frameNumber / currentTime ) );\r\n            if( currentTime > 1 ){\r\n                this.startTime = new Date().getTime();\r\n                this.frameNumber = 0;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n\r\n    // function chooseCharScreen(){\r\n    //     //remove start button\r\n    //     let s = document.getElementById(\"startButton\");\r\n    //     s.style.display = \"none\";\r\n    //     background();\r\n        \r\n    //     //character selection, start game\r\n    //     drawBox();\r\n    //     let selectionTitle = document.createElement(\"h2\");\r\n    //     selectionTitle.setAttribute(\"class\", \"selectionTitle\");\r\n    //     selectionTitle.innerHTML = \"Choose your character!\";\r\n    //     document.body.appendChild(selectionTitle);\r\n\r\n    //     //add buttons for character selection\r\n    //     let charSelection = document.createElement(\"div\");\r\n    //     charSelection.setAttribute(\"class\", \"charSelection\");\r\n    //     document.body.appendChild(charSelection);\r\n    //     charLinks.forEach( (link, idx) => {\r\n    //         let charImg = document.createElement(\"img\");\r\n    //         charImg.src = link;\r\n    //         charImg.setAttribute(\"id\", `${idx}`);\r\n    //         charImg.addEventListener(\"click\", selectChar);\r\n    //         charSelection.appendChild(charImg);\r\n    //     });\r\n\r\n    //     //character selected\r\n    //     function selectChar(e){\r\n    //         e.preventDefault();\r\n    //         let idx = parseInt(e.target.id);\r\n    //         setPlayer(characterImages[idx], characterDimensions[idx][0], characterDimensions[idx][1]);\r\n    //         window.removeEventListener('submit',selectChar);\r\n    //         document.body.removeChild(charSelection);\r\n    //         document.body.removeChild(selectionTitle);\r\n    //         removeBox();\r\n    //         startGame();\r\n    //     }\r\n    // }\r\n\r\n\r\n    // function setPlayer(pic, w, h){\r\n    //     charChoice = pic;\r\n    //     player.pWidth = w;\r\n    //     player.pHeight = h;\r\n    // }\r\n\r\n    // function startGame(){ //initialize variables\r\n    //     player.x = 50;\r\n    //     player.y = player.v = score = 0;\r\n    //     crash = false;\r\n    //     newScore = false;\r\n    //     pipeLocation = [0];\r\n    //     pastPosition = [0];\r\n    //     spawnPipe();\r\n    //     toggleScoreDisplay();\r\n    //     window.addEventListener('keypress',keyHandler);\r\n    //     window.requestAnimationFrame(drawEntities);\r\n    //     // addMusic();\r\n    // }\r\n\r\n    // function keyHandler(e){\r\n    //     let code = e.keyCode;\r\n    //     if(code == 32){ //space key, make bird fly/jump\r\n    //         player.v = -4.6; //og: -2.7\r\n    //     }\r\n    // }\r\n\r\n    function foreground(){\r\n        ctx.drawImage(fgDay, 0, c.height - fgHeight);\r\n    }\r\n\r\n    function background(){\r\n        ctx.drawImage(bgDay, 0, 0);\r\n    }\r\n\r\n    // function gravity(){\r\n    //     player.v += 0.17; //og: 0.07\r\n    //     player.y = Math.min(c.height - 10, Math.max(0, player.y + player.v));\r\n    // }\r\n\r\n    // function spawnPipe(){\r\n    //     pipeLocation.push({ \"x\": c.width, \"y\": Math.floor(Math.random() * (c.height - fgHeight - 2 * gapConst) + 0.5*gapConst)})\r\n    // }\r\n\r\n    // function drawBox(){\r\n    //     let backBox = document.createElement(\"div\");\r\n    //     backBox.setAttribute(\"id\", \"backBox\");\r\n    //     document.body.appendChild(backBox);\r\n    // }\r\n\r\n    // function removeBox(){\r\n    //     let backBox = document.getElementById(\"backBox\");\r\n    //     document.body.removeChild(backBox);\r\n    // }\r\n\r\n    // function storeLastPosition(xPos, yPos){\r\n    //     pastPosition.push({\r\n    //         x: xPos, y: yPos\r\n    //     });\r\n    //     if (pastPosition.length > motionTrailLength){\r\n    //         pastPosition.shift();\r\n    //     }\r\n    // }\r\n\r\n    function trailRainbow(){\r\n        let xPos = player.x;\r\n        for (let i = pastPosition.length - 1; i >=0 ; i--){ //draw trail length\r\n            let colorStream = 0;\r\n            opacity = (i + 1)/30;\r\n            //opacity = ((i + 1)/(pastPosition.length));\r\n            for (let j = 0; j < rainbowColors.length; j++){ //draw trail slice\r\n                ctx.beginPath();\r\n                ctx.fillStyle = \"rgba(\" + rainbowColors[j] + \",\"+ opacity + \")\";\r\n                ctx.fillRect(xPos + 15, pastPosition[i].y + colorStream, 3, 6);\r\n                ctx.fill();\r\n                colorStream += 6;\r\n            }\r\n            xPos -=3;\r\n        }\r\n    }\r\n\r\n    function trailJetpack(){\r\n        let yPos = player.y;\r\n        for (let i = 20; i >= 0; i--){\r\n            opacity = ((i + 1)/(40));\r\n            if (player.v <= 0){\r\n                ctx.beginPath();\r\n                ctx.fillStyle = \"rgba(255,102,153, \"+ opacity + \")\";\r\n                ctx.arc(player.x, yPos + (player.pHeight / 2), 7, 0, 2*Math.PI, true);\r\n                ctx.fill();\r\n            }\r\n            yPos += 3;\r\n        }\r\n    }\r\n\r\n    // function drawPlayer(){\r\n    //     ctx.drawImage(charChoice, player.x, player.y, player.pWidth, player.pHeight);\r\n    // }\r\n\r\n    // function drawEntities(){\r\n    //     ctx.clearRect(0,0, c.width, c.height);\r\n    //     background();\r\n    //     for(let i = 0; i < pipeLocation.length; i++){ //draw pipes\r\n    //         pipeLocation[i].x -= 2; //move pipes left\r\n    //         ctx.drawImage(topPipesPic, pipeLocation[i].x, 0 - (topPipesPic.height - pipeLocation[i].y));\r\n    //         ctx.drawImage(btmPipesPic, pipeLocation[i].x, pipeLocation[i].y + gapConst);\r\n    //         if (pipeLocation[i].x == 260){ //og: 160\r\n    //             spawnPipe(); //spawn new pipe\r\n    //         }\r\n    //         //collision detection\r\n    //         if( (((player.x <= pipeLocation[i].x && player.x + player.pWidth >= pipeLocation[i].x) //hit left half\r\n    //             || (player.x >= pipeLocation[i].x && player.x + player.pWidth <= pipeLocation[i].x + topPipesPic.width) //hit inside \r\n    //             || (player.x <= pipeLocation[i].x + topPipesPic.width && player.x + player.pWidth >= pipeLocation[i].x + topPipesPic.width)) //hit right half\r\n    //             && (player.y <= pipeLocation[i].y || player.y + player.pHeight >= pipeLocation[i].y + gapConst))\r\n    //             || (player.y + player.pHeight >= c.height - fgHeight)){ //hit ground\r\n    //             crash = true;\r\n    //             break;\r\n    //         }\r\n    //         if (pipeLocation[i].x == player.x)\r\n    //             score++; //update score\r\n    //             updateScore();\r\n    //         }\r\n    //     foreground();\r\n    //     if (charChoice == catPic){\r\n    //         storeLastPosition(player.x, player.y);\r\n    //         trailRainbow();\r\n    //     }\r\n    //     if (charChoice == bananyaPic){\r\n    //         trailJetpack();\r\n    //     }\r\n    //     drawPlayer();\r\n    //     gravity();\r\n\r\n    //     //display score\r\n    //     if (score > highScore){\r\n    //         highScore = score;\r\n    //         newScore = true;\r\n    //     }\r\n\r\n    //     // ctx.fillText(\"FPS : \" + fps.getFPS(), 380, 15); //show fps\r\n\r\n    //     //update game frame\r\n    //     if (crash){\r\n    //         window.cancelAnimationFrame(update);\r\n    //         endGame();\r\n    //     }else{\r\n    //         update = window.requestAnimationFrame(drawEntities);\r\n    //     }\r\n    // }\r\n\r\n    // function endGame(){ //display game over screen, score, prompt to restart\r\n    //     //draw background\r\n    //     toggleScoreDisplay();\r\n    //     background();\r\n    //     drawBox();\r\n\r\n    //     //display text\r\n    //     let endText = document.createElement(\"div\");\r\n    //     endText.setAttribute(\"class\", \"selectionTitle endScreen\");\r\n    //     let endTitle = document.createElement(\"h2\");\r\n    //     endTitle.innerHTML = \"GAME OVER\";\r\n    //     let endScore = document.createElement(\"div\");\r\n    //     endScore.innerHTML = `Score: ${score}`;\r\n    //     let endHighScore = document.createElement(\"div\");\r\n    //     endHighScore.innerHTML = newScore ? `[NEW] Best: ${highScore}` : `Best: ${highScore}`;\r\n    //     document.body.appendChild(endText).appendChild(endTitle);\r\n    //     endText.appendChild(endScore);\r\n    //     endText.appendChild(endHighScore);\r\n\r\n    //     const restartGame = function(e){\r\n    //         window.cancelAnimationFrame(update);\r\n    //         removeBox();\r\n    //         document.body.removeChild(endText);\r\n    //         document.body.removeChild(endButtons);\r\n    //         e.target.id === \"start\" ? startGame() : chooseCharScreen();\r\n    //     }\r\n\r\n    //     //display restart options\r\n    //     let endButtons = document.createElement(\"div\");\r\n    //     endButtons.setAttribute(\"class\", \"endButtons\")\r\n    //     let restart = document.createElement(\"div\");\r\n    //     restart.setAttribute(\"class\", \"endButton\");\r\n    //     restart.setAttribute(\"id\", \"start\");\r\n    //     restart.addEventListener(\"click\", restartGame);\r\n    //     restart.innerHTML = \"Restart\";\r\n    //     let changeChar = document.createElement(\"div\");\r\n    //     changeChar.setAttribute(\"class\", \"endButton\");\r\n    //     changeChar.setAttribute(\"id\", \"charSelect\");\r\n    //     changeChar.addEventListener(\"click\", restartGame);\r\n    //     changeChar.innerHTML = \"Change character\";\r\n    //     document.body.appendChild(endButtons).appendChild(restart)\r\n    //     endButtons.appendChild(changeChar);\r\n    // }\r\n\r\n})\r\n\r\n*/\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/level.js":
/*!**********************!*\
  !*** ./src/level.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Level; });\nconst CONSTANTS = {\r\n    GAP_HEIGHT: 150,\r\n    PIPE_WIDTH: 50,\r\n    PIPE_SPACING: 220,\r\n    EDGE_BUFFER: 50,\r\n    PIPE_SPEED: 2\r\n};\r\n\r\nclass Level {\r\n    constructor(dimensions){\r\n        this.dimensions = dimensions;\r\n        const initialSpawn = this.dimensions.width + (60 * CONSTANTS.PIPE_SPEED);\r\n        this.pipes = [\r\n            this.getRandomPipe(initialSpawn),\r\n            this.getRandomPipe(initialSpawn + CONSTANTS.PIPE_SPACING),\r\n            this.getRandomPipe(initialSpawn + 2 * CONSTANTS.PIPE_SPACING)\r\n        ];\r\n    }\r\n\r\n    collidesWith(birdBounds){\r\n        //returns true if bird collides with any pipe, false otherwise\r\n        let hitDetection = false;\r\n        this.pipes.forEach( pipeSet => {\r\n            const topHit = this._overlap(pipeSet.topPipe, birdBounds);\r\n            const bottomHit = this._overlap(pipeSet.bottomPipe, birdBounds);\r\n            if (topHit || bottomHit) hitDetection = true; \r\n        });\r\n        return hitDetection;\r\n    }\r\n\r\n    _overlap(box1, box2){\r\n        //returns true if box1 overlaps with box2, false otherwise\r\n        if (box1.left > box2.right || box1.right < box2.left) return false; //no overlap in x direction\r\n        if (box1.top > box2.bottom || box1.bottom < box2.top) return false; //no overlap in y direction\r\n        return true;\r\n    }\r\n\r\n    getRandomPipe(x){\r\n        //receives starting x coord, returns new pipe object\r\n        const heightRange = this.dimensions.height - (2 * CONSTANTS.EDGE_BUFFER) - CONSTANTS.GAP_HEIGHT;\r\n        const gapTop = (Math.random() * heightRange) + CONSTANTS.EDGE_BUFFER;\r\n        const pipe = {\r\n            topPipe: {\r\n                left: x,\r\n                right: x + CONSTANTS.PIPE_WIDTH,\r\n                top: 0,\r\n                bottom: gapTop\r\n            },\r\n            bottomPipe: {\r\n                left: x,\r\n                right: x + CONSTANTS.PIPE_WIDTH,\r\n                top: gapTop + CONSTANTS.GAP_HEIGHT,\r\n                bottom: this.dimensions.height\r\n            },\r\n            passed: false\r\n        };\r\n        return pipe;\r\n    }\r\n\r\n    movePipes(){\r\n        //moves pipes across screen\r\n        this.pipes.forEach ( pipe => {\r\n            pipe.topPipe.left -= CONSTANTS.PIPE_SPEED;\r\n            pipe.topPipe.right -= CONSTANTS.PIPE_SPEED;\r\n            pipe.bottomPipe.left -= CONSTANTS.PIPE_SPEED;\r\n            pipe.bottomPipe.right -= CONSTANTS.PIPE_SPEED;\r\n        });\r\n\r\n        //remove from array when offscreen and add new pipe w/ new gap\r\n        if (this.pipes[0].topPipe.right <= 0){\r\n            this.pipes.shift();\r\n            const nextX = this.pipes[1].topPipe.left + CONSTANTS.PIPE_SPACING;\r\n            this.pipes.push(this.getRandomPipe(nextX));\r\n        }\r\n    }\r\n\r\n    drawPipes(ctx){\r\n        //receives cavnas context, draws pipes onto canvas\r\n        this.pipes.forEach( pipe => {\r\n            ctx.fillStyle = \"green\";\r\n            ctx.fillRect( //draw top pipe\r\n                pipe.topPipe.left, \r\n                pipe.topPipe.top, \r\n                CONSTANTS.PIPE_WIDTH, \r\n                pipe.topPipe.bottom - pipe.topPipe.top\r\n            );\r\n            ctx.fillRect(//draw bottom pipe\r\n                pipe.bottomPipe.left, \r\n                pipe.bottomPipe.top, \r\n                CONSTANTS.PIPE_WIDTH, \r\n                pipe.bottomPipe.bottom - pipe.bottomPipe.top\r\n            );\r\n        })\r\n    }\r\n\r\n    drawBackground(ctx){\r\n        //receives canvas context, draws background\r\n        ctx.fillStyle = \"PALETURQUOISE\";\r\n        ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\r\n    }\r\n\r\n    updateScore(birdBounds, addToScore){\r\n        //receives bird hitbox and addToScore function, adds 1 to score if pipe is successfully passed\r\n        this.pipes.forEach( pipeSet => {\r\n            if (pipeSet.topPipe.right < birdBounds.left){\r\n                if (!pipeSet.passed){\r\n                    pipeSet.passed = true;\r\n                    addToScore();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    animate(ctx){\r\n        //receives canvas context, draws structures in the level\r\n        this.drawBackground(ctx);\r\n\r\n        //update and draw pipes\r\n        this.movePipes();\r\n        this.drawPipes(ctx);\r\n    }\r\n}\n\n//# sourceURL=webpack:///./src/level.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Player; });\nconst CONSTANTS = {\r\n    FLAP_SPEED: 8,\r\n    GRAVITY: 0.4,\r\n    TERMINAL_VELOCITY: 12\r\n};\r\n\r\nclass Player {\r\n    constructor(dimensions, charDetails){\r\n        this.dimensions = dimensions;\r\n        this.image = this.getImage(charDetails.link);\r\n        this.width = charDetails.width;\r\n        this.height = charDetails.height;\r\n        this.x = this.dimensions.width / 3;\r\n        this.y = 0;\r\n        this.velocity = 0;\r\n    }\r\n\r\n    getImage(link){\r\n        //receives image source link, creates and returns an image element\r\n        const charImage = new Image;\r\n        charImage.src = link;\r\n        return charImage;\r\n    }\r\n\r\n    getBounds(){\r\n        //returns an object with the current bounds of the player\r\n        return {\r\n            left: this.x,\r\n            right: this.x + this.width,\r\n            top: this.y,\r\n            bottom: this.y + this.height\r\n        };\r\n    }\r\n\r\n    drawPlayer(ctx){\r\n        //receives canvas context, draws player\r\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    movePlayer(){\r\n        //updates player velocity and position for each frame\r\n        this.y += this.velocity;            //update vertical position\r\n        this.velocity += CONSTANTS.GRAVITY  //update acceleration due to gravity\r\n\r\n        //prevent player from exceeding terminal velocity in positive and negative directions\r\n        if (Math.abs(this.velocity) > CONSTANTS.TERMINAL_VELOCITY){\r\n            if (this.velocity > 0){\r\n                this.velocity = CONSTANTS.TERMINAL_VELOCITY;\r\n            } else {\r\n                this.velocity = -1 * CONSTANTS.TERMINAL_VELOCITY;\r\n            }\r\n        }\r\n    }\r\n\r\n    flap(){\r\n        //adjusts velocity for player to fly up\r\n        this.velocity = -1 * CONSTANTS.FLAP_SPEED;\r\n    }\r\n\r\n    animate(ctx){\r\n        //receives canvas context, animates player movement and physics\r\n        this.movePlayer();\r\n        this.drawPlayer(ctx);\r\n    }\r\n}\n\n//# sourceURL=webpack:///./src/player.js?");

/***/ })

/******/ });